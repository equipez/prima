name: Test RESCUE and IDZ, classical

on:
  # Trigger the workflow on push or pull request
  #push:
  #pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 20 * * *'
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0}', inputs.git-ref) || '' }}


jobs:
  test:
    name: Profile PRIMA.
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        matlab: [latest]
        dim: [small, all]
        solver: [newuoa, bobyqa, lincoa]
        variant: [classical]
        precision: [single, double, quadruple]

    steps:
      - name: Get the solver name
        run:  echo "SOLNAME=$(echo ${{ matrix.solver }} | cut -c1-6)" >> $GITHUB_ENV

      - name: Run `sudo apt update -y`
        run: sudo apt update -y  # Otherwise, free-disk-space or other actions relying on `apt` may fail

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false  # Important, or the runner may be shut down due to memory starvation.

      - name: Clone Repository (Latest)
        uses: actions/checkout@v5.0.0
        if: github.event.inputs.git-ref == ''
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v5.0.0
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive

      - name: Miscellaneous setup
        run: export SWAP_SIZE=20 && bash .github/scripts/misc_setup

      - name: Clone MatCUTEst
        uses: actions/checkout@v5.0.0
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          repository: matcutest/matcutest_compiled
          path: matcutest

      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFORTRAN_VERSION }}
      - name: Check gfortran version on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: which gcc && gcc --version && which gfortran && gfortran --version

      - name: Install epstopdf and ghostscript
        if: startsWith(matrix.os, 'ubuntu')
        run: bash .github/scripts/install_epstopdf && bash .github/scripts/install_ghostscript

      - name: Check MATLAB
        id: check_matlab
        run: if type 'matlab' &> /dev/null ; then echo "::set-output name=has_matlab::true" ; fi

      - name: Set up MATLAB with optimization toolbox
        if: ${{ steps.check_matlab.outputs.has_matlab != 'true' }}
        uses: matlab-actions/setup-matlab@v2.6.0
        with:
          release: ${{ matrix.matlab }}
          cache: true
          products: Optimization_Toolbox Parallel_Computing_Toolbox

      - name: Make a modified version of PRIMA to test
        run: |
          bash benchmark/rescue_idz/make_rescue_idz
          RESCUE_IDZ_DIR="$(cat benchmark/rescue_idz/RESCUE_IDZ_DIR)"
          rm -rf matlab fortran setup.m .development
          shopt -s dotglob  # Without this, the `mv` command below will not move hidden files.
          mv "$RESCUE_IDZ_DIR"/* ./

      - name: Conduct the test
        uses: matlab-actions/run-command@v2.2.2
        with:
          command: |
            ver;
            root_dir = pwd();

            % Install MatCUTEst.
            cd(fullfile(root_dir, 'matcutest')); install(); which macup

            % Make the test.
            cd(fullfile(root_dir, 'matlab/tests'));
            options = struct();
            options.classical = strcmp('${{ matrix.variant }}', 'classical');
            options.precision = '${{ matrix.precision }}';
            options.rhoend = eps;
            options.maxfun_dim = 1000;
            options.strict = 0;
            options.nr = 3;  % 3 random runs for each problem

            options.blacklist = {};
            switch '${{ matrix.precision }}'
            case 'single'
                switch '${{ matrix.solver }}'
                case 'lincoa'
                    options.blacklist = [options.blacklist, {'EQC', 'GMNCASE3', 'PENTAGON'}];  % Classical LINCOA segfaults
                end
            case 'quadruple'
                switch '${{ matrix.solver }}'
                case 'newuoa'
                    options.blacklist = [options.blacklist, {'ARGLINA', 'ARGLINB', 'ARGLINC', 'CHNROSNB', 'CHNRSNBM', 'ERRINROS', 'HYDCAR6LS', 'LRIJCNN1', 'LUKSAN11LS', 'LUKSAN13LS', 'LUKSAN15LS', 'METHANB8LS', 'PALMER8C', 'QING', 'SENSORS', 'SPIN2LS', 'TOINTPSP', 'TRIGON1', 'VANDANMSLS', 'VESUVIOULS', 'WATSON'}];
                case 'bobyqa'
                    options.blacklist = [options.blacklist, {'BQPGABIM', 'BQPGASIM', 'CHEBYQAD', 'DECONVB', 'DECONVU', 'ERRINRSM', 'HOLMES', 'LEVYMONT', 'TOINTGOR'}];
                case 'lincoa'
                    options.blacklist = [options.blacklist, {'AGG', 'ANTWERP', 'ARGLALE', 'ARGLBLE', 'AVION2', 'CVXQP1', 'DALLASS', 'DUAL1', 'DUAL2', 'DUAL3', 'ERRINRSM', 'GMNCASE1', 'GMNCASE2', 'GMNCASE3', 'HYDROELS', 'LINSPANH', 'METHANB8LS', 'SMBANK', 'DUAL4', 'QPNBLEND', 'SPANHYD', 'SSEBLIN'}];
                end
            end

            try
              if (strcmp('${{ matrix.dim }}', 'small') && ~strcmp('${{ matrix.precision }}', 'quadruple')) || strcmp('${{ matrix.solver }}', 'newuoa')
                  prof('${{ matrix.solver }}', '${{ matrix.dim }}', 'norma', options, 'rev');
              elseif strcmp('${{ matrix.solver }}', 'lincoa')
                  prof('${{ matrix.solver }}', '${{ matrix.dim }}', 'l', 'norma', options, 'rev');
              elseif strcmp('${{ matrix.solver }}', 'bobyqa')
                  prof('${{ matrix.solver }}', '${{ matrix.dim }}', 'b', 'norma', options, 'rev');
              end
            catch
              % Copy the crash dump files to root_dir if exceptions occur.
              copy_crash_dump_files(root_dir, true)
              dir(root_dir)
            end


            % Move the files to prepare for uploading artifacts

            solver = '${{ env.SOLNAME }}';
            cd(fullfile(cd(), 'testdata'));
            files = dir([solver, '*.summary.*.pdf'])
            for ifile = 1 : length(files)
                file = fullfile(files(ifile).folder, files(ifile).name)
                newfile = fullfile(files(ifile).folder, ['${{ matrix.variant }}_', files(ifile).name])
                movefile(file, newfile);
            end
            movefile(fullfile(cd(), '*summary*.pdf'), ['/tmp/', solver, '_profile_prima/']);
            movefile(fullfile(cd(), '*.txt'), ['/tmp/', solver, '_profile_prima/']);

            files = [dir(['/tmp/', solver, '_profile_prima/*start*']); dir(['/tmp/', solver, '_profile_prima/*end*'])]
            for ifile = 1 : length(files)
                file = fullfile(files(ifile).folder, files(ifile).name)
                newfile = fullfile(files(ifile).folder, ['${{ matrix.variant }}_', files(ifile).name])
                movefile(file, newfile);
            end

      - name: List problems that started but did not end
        # The solver got stuck when solving these problems. Investigate what happened.
        if: always()
        shell: bash
        run: |
          solver=${{ env.SOLNAME }}
          cd /tmp/${solver}_profile_prima/
          ls -R1 *${solver}*_start > ${solver}_prob_start
          ls -R1 *${solver}*_end > ${solver}_prob_end
          diff ${solver}_prob_start ${solver}_prob_end > ${solver}_stuck || :
          printf "\n\n>>>>>>>>>>>>>>>>\nProblems that started but did not end:\n\n"
          cat ${solver}_stuck
          printf "\n<<<<<<<<<<<<<<<<\n\n"

      - name: Store artifacts
        uses: actions/upload-artifact@v4.3.1
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        with:
          name: artifact-${{ matrix.solver }}-${{ matrix.dim }}-${{ matrix.variant }}-${{ matrix.precision }}
          path: |
            matlab_crash_dump*
            /tmp/${{ env.SOLNAME }}_profile_prima/*summary*.pdf
            /tmp/${{ env.SOLNAME }}_profile_prima/*.txt
            /tmp/${{ env.SOLNAME }}_profile_prima/*prob_start*
            /tmp/${{ env.SOLNAME }}_profile_prima/*prob_end*
            /tmp/${{ env.SOLNAME }}_profile_prima/*stuck*
            /tmp/${{ env.SOLNAME }}_profile_prima/fort.*

      - name: Remove the test data
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        run: rm -rf ./matlab/tests/testdata && rm -rf /tmp/${{ env.SOLNAME }}_profile_prima


  merge_artifacts:
    continue-on-error: true  # As of 20240218, this action may fail if there are too many artifacts. We ignore the failure.
    if: always()
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: 00-merged-artifacts
          pattern: artifact-*
