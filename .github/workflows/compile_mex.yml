name: Compile MEX

on:
  # Trigger the workflow on push or pull request
  #push:
  #pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 0 * * *'
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0}', inputs.git-ref) || '' }}

env:
  MATLAB_VERSION: R2023b
  MATLAB: /Applications/MATLAB_R2023b.app/bin/matlab

jobs:

  mex:
    name: Compile MEX
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # The matrix is the same as that of test_matlab.yml
      matrix:
        os: [ubuntu-22.04, ubuntu-latest, macos-13, windows-latest, windows-2025]
        matlab: [R2020b, R2021a, R2021b, R2022a, R2022b, R2023a, R2023b, R2024a, R2024b, R2025a, latest]

        exclude:

          # Below R2022a, MEX does not work on windows-latest due to the version of MS Visual Studio;
          # R2022a/b should work according to the documentation of MathWorks and GitHub Actions, but
          # they do not as of July 2025.
          - os: windows-latest
            matlab: R2020b
          - os: windows-latest
            matlab: R2021a
          - os: windows-latest
            matlab: R2021b
          - os: windows-latest
            matlab: R2022a
          - os: windows-latest
            matlab: R2022b

          - os: windows-2025
            matlab: R2020b
          - os: windows-2025
            matlab: R2021a
          - os: windows-2025
            matlab: R2021b
          - os: windows-2025
            matlab: R2022a
          - os: windows-2025
            matlab: R2022b


    steps:

      - name: Set http.postBuffer and core.compression
        # This is a workaround for random "early EOF" of checkout.
        # See https://github.com/actions/checkout/issues/748, https://github.com/actions/checkout/issues/1379
        if: startsWith(matrix.os, 'windows')
        run: git config --global http.postBuffer 1048576000 && git config --global core.compression 0

      - name: Run `sudo apt update`
        run: sudo apt update  # Otherwise, free-disk-space or other actions relying on `apt` may fail

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false  # Important, or the runner may be shut down due to memory starvation.

      - name: Clone Repository (Latest)
        uses: actions/checkout@v4.2.2
        if: github.event.inputs.git-ref == ''
        with:
          submodules: recursive
        #   ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
        # As of 231227, checkout with ssh fails frequently on Windows runners.
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v4.2.2
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          submodules: recursive

      - name: Miscellaneous setup
        run: bash .github/scripts/misc_setup

      - name: Decide gfortran version for MATLAB on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          GFVER=${{ env.GFORTRAN_VERSION }}
          if [[ "${{ matrix.os }}" = "ubuntu-20.04" ]] ; then
              GFVER=11
          fi
          if [[ "${{ matrix.matlab }}" = "R2020b" || "${{ matrix.matlab }}" = "R2021a" || "${{ matrix.matlab }}" = "R2021b" ]] ; then
              GFVER=9
          fi
          echo "GFVER=$GFVER" >> $GITHUB_ENV
      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFVER }}
      - name: Check gfortran version on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: which gfortran && gfortran --version

      - name: Decide the version of oneAPI to use on macOS and Windows
        shell: bash
        if: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'windows') }}
        run: |
          ONEAPI_VERSION=
          if [[ "${{ matrix.os }}" = "windows-"* ]] ; then
              if [[ "${{ matrix.matlab }}" = "R2020"* || "${{ matrix.matlab }}" = "R2021"* || "${{ matrix.matlab }}" = "R2022"* || "${{ matrix.matlab }}" = "R2023"* ]] ; then
                  ONEAPI_VERSION=2023
              fi
          fi
          echo "ONEAPI_VERSION=$ONEAPI_VERSION" >> $GITHUB_ENV
          echo "ONEAPI_VERSION:" $ONEAPI_VERSION

      - name: Install Intel oneAPI on macOS
        if: startsWith(matrix.os, 'macos')
        run: bash .github/scripts/install_oneapi_macos.sh $ONEAPI_VERSION

      - name: Install Intel oneAPI on Windows
        if: startsWith(matrix.os, 'windows')
        run: cmd.exe "/K" '".github\scripts\install_oneapi_windows.bat %ONEAPI_VERSION%"'

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2.5.0
        with:
          release: ${{ matrix.matlab }}
          cache: true

      - name: Compile the MEX functions
        uses: matlab-actions/run-command@v2.2.1
        with:
          startup-options: -nojvm -noopengl -logfile matlab/interfaces/private/build.log
          command: |
            ver;
            options.half = false;
            options.single = true;
            options.quadruple = true;
            options.debug = true;
            options.classical = false;
            options.verbose = true;
            options
            setup(options);
            testprima;

      - name: Store artifacts
        uses: actions/upload-artifact@v4.3.1
        with:
          name: prima-${{ matrix.os }}-${{ matrix.matlab }}
          path: |
            ./*
            !./benchmark
            !./.*
            !./*.log
            !./*.dot
            !./*.json


  # mex_mac_silicon:
  #   name: Compile MEX, macOS ARM64
  #   runs-on: [self-hosted, macOS, ARM64]
  #   strategy:
  #     fail-fast: false

  #   steps:
  #     - name: Clone Repository (Latest)
  #       uses: actions/checkout@v4.2.2
  #       if: github.event.inputs.git-ref == ''
  #       with:
  #         submodules: recursive
  #     - name: Clone Repository (Custom Ref)
  #       uses: actions/checkout@v4.2.2
  #       if: github.event.inputs.git-ref != ''
  #       with:
  #         ref: ${{ github.event.inputs.git-ref }}
  #         submodules: recursive

  #     - name: Miscellaneous setup
  #       run: |
  #         bash .github/scripts/misc_setup
  #         echo "PATH=$PATH:$(dirname ${{ env.MATLAB }})" >> $GITHUB_ENV

  #     - name: Check whether matlab is on the path
  #       run: |
  #         echo "$PATH"
  #         which matlab

  #     - name: Conduct the test
  #       uses: matlab-actions/run-command@v2.2.1
  #       with:
  #         startup-options: -nojvm -noopengl -logfile matlab/interfaces/private/build.log
  #         command: |
  #           ver;
  #           options.half = true;
  #           options.single = true;
  #           options.quadruple = true;
  #           options.debug = true;
  #           options.classical = false;
  #           options.verbose = true;
  #           options
  #           setup(options);
  #           testprima;

  #     - name: Store artifacts
  #       uses: actions/upload-artifact@v4.3.1
  #       with:
  #         name: prima-macos-arm64-${{ env.MATLAB_VERSION }}
  #         path: |
  #           ./*
  #           !./benchmark
  #           !./.*
  #           !./*.log
  #           !./*.dot
  #           !./*.json
