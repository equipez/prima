name: Verification, small

on:
  # Trigger the workflow on push or pull request
  push:
  pull_request:  # DANGEROUS! MUST be disabled for self-hosted runners!
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 15 * * *'
  # Trigger the workflow manually
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      random-seed:
        description: Random Seed (Optional)
        required: false

# Show the git ref in the workflow name if it is invoked manually.
run-name: ${{ github.event_name == 'workflow_dispatch' && format('Manual run {0} , seed {1}', inputs.git-ref, inputs.random-seed) || '' }}


jobs:
  test:
    name: Verify PRIMA.
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest]
        matlab: [R2022a, R2024b, R2025a, latest]  # R2021a/b do not suppoert gfortran 10+.
        solver: [newuoa, cobyla, lincoa, bobyqa, uobyqa]
        dim: [small]
        gfortran_version: [13, 14, latest]
        use_system_libgcc: [true, false]  # Whether to use the system libgcc or the one shipped with MATLAB.
        exclude:
          - os: ubuntu-22.04
            gfortran_version: 14
          - os: ubuntu-22.04
            gfortran_version: latest

    steps:

      - name: Run `sudo apt update -y`
        run: sudo apt update -y  # Otherwise, free-disk-space or other actions relying on `apt` may fail

      - name: Free disk space
        uses: jlumbroso/free-disk-space@main
        if: startsWith(matrix.os, 'ubuntu')
        with:
          # all of these default to true, but feel free to set to "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false  # Important, or the runner may be shut down due to memory starvation.
      - name: Clone Repository (Latest)
        uses: actions/checkout@v5.0.0
        if: github.event.inputs.git-ref == ''
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive
      - name: Clone Repository (Custom Ref)
        uses: actions/checkout@v5.0.0
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          submodules: recursive

      - name: Miscellaneous setup
        run: bash .github/scripts/misc_setup

      - name: Clone MatCUTEst
        uses: actions/checkout@v5.0.0
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_ACT }} # This forces checkout to use SSH, not HTTPS
          repository: matcutest/matcutest_compiled
          path: matcutest

      - name: Decide the gfortran version to use
        run: |
          if [[ "${{ matrix.gfortran_version }}" == "latest" ]]; then
              export GFORTRAN_VERSION=${{ env.GFORTRAN_VERSION }}
          else
              export GFORTRAN_VERSION=${{ matrix.gfortran_version }}
              echo "GFORTRAN_VERSION=${GFORTRAN_VERSION}" >> $GITHUB_ENV
          fi
          echo "To use gfortran version ${GFORTRAN_VERSION}"

      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFORTRAN_VERSION }}

      - name: Check gfortran version on Linux
        if: startsWith(matrix.os, 'ubuntu')
        run: which gfortran && gfortran --version

      - name: Check MATLAB
        id: check_matlab
        run: if type 'matlab' &> /dev/null ; then echo "::set-output name=has_matlab::true" ; fi

      - name: Set up MATLAB
        if: ${{ steps.check_matlab.outputs.has_matlab != 'true' }}
        uses: matlab-actions/setup-matlab@v2.6.0
        with:
          release: ${{ matrix.matlab }}
          cache: true
          products: Parallel_Computing_Toolbox

      - name: Link system libgcc to MATLAB if needed
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          matlab_root=$(realpath $(dirname $(which matlab))/../)
          echo "MATLAB root is ${matlab_root}"
          matlab_libgcc="${matlab_root}/sys/os/glnxa64/libgcc_s.so.1"
          echo "MATLAB libgcc is:"
          ls -alh ${matlab_libgcc} || exit 42
          system_libgcc="/usr/lib/x86_64-linux-gnu/libgcc_s.so.1"
          echo "System libgcc is:"
          ls -alh ${system_libgcc} || exit 42
          if [[ "${{ matrix.use_system_libgcc }}" == "true" ]] ; then
              ln -sf ${system_libgcc} ${matlab_libgcc} || exit 42
              echo "Linked ${system_libgcc} to ${matlab_libgcc}."
          else
              echo "Keep ${matlab_libgcc} untouched."
          fi
          echo "After the operation, MATLAB libgcc is:"
          ls -alh ${matlab_libgcc} || exit 42

      - name: Revise get_solvers.m to print the revised header file
        run: |
          cd matlab/tests/private || exit 1
          $SEDI "s|\(^.*\)\(setup(solver.*$\)|\1header_file\n\1system(['cat ', header_file]);\n\1\2|" get_solvers.m

      - name: Revise setup_compiler_options.m to print the revised mexopt file
        run: |
          cd matlab/tests/private || exit 1
          $SEDI "s|return|for ifile = 1 : length(config_files), ifile, cfile = fullfile(config_dir, config_files{ifile}) , system(['cat ', cfile]); end|" set_compiler_options.m

      - name: Revise compiled.m to print necessary information
        run: |
          cd matlab/setup_tools || exit 42
          $SEDI 's|\(common_mex_options\s*=\s*.*$\)$|\1\ncommon_mex_options{:}|' compile.m
          $SEDI 's|\(if\s*~support_internal_procedures\)|support_internal_procedures\n\1|' compile.m
          cat compile.m

      - name: Conduct the test
        uses: matlab-actions/run-command@v2.2.2
        with:
          command: |
            ver;
            root_dir = pwd();

            cd(fullfile(root_dir, 'matcutest')); install(); which macup

            cd(fullfile(root_dir, 'matlab/tests'));
            options = struct();
            options.verbose = true;
            if ~isempty('${{ inputs.random-seed }}')
                options.seed = str2num('${{ inputs.random-seed }}');
            else
                copyfile('private/year_week.m', cd());
                options.seed = year_week('Asia/Shanghai');
            end
            options.nr = 6;
            options
            verify('${{ matrix.solver }}', '${{ matrix.dim }}', options);
            cd(root_dir); setup path; setup clean; setup uninstall  % Test that `setup` works properly.

      - name: List problems that started but did not end
        # The solver got stuck when solving these problems. Investigate what happened.
        if: always()
        shell: bash
        run: |
          solver=${{ matrix.solver }}
          cd /tmp/${solver}_verify_prima/
          ls -R1 *${solver}*_start > ${solver}_prob_start
          ls -R1 *${solver}*_end > ${solver}_prob_end
          diff ${solver}_prob_start ${solver}_prob_end > ${solver}_stuck || :
          printf "\n\n>>>>>>>>>>>>>>>>\nProblems that started but did not end:\n\n"
          cat ${solver}_stuck
          printf "\n<<<<<<<<<<<<<<<<\n\n"

      - name: Store artifacts
        uses: actions/upload-artifact@v4.3.1
        if: always()  # Always run even if the workflow is canceled manually or due to overtime.
        with:
          name: artifact-${{ matrix.solver }}-${{ matrix.dim }}-${{ matrix.matlab }}-${{ matrix.use_system_libgcc }}-${{ matrix.gfortran_version }}-${{ matrix.os }}
          path: |
            /tmp/${{ matrix.solver }}_verify_prima/*prob_start*
            /tmp/${{ matrix.solver }}_verify_prima/*prob_end*
            /tmp/${{ matrix.solver }}_verify_prima/*stuck*
            /tmp/${{ matrix.solver }}_verify_prima/fort.*
